swagger: '2.0'

info:
  version: 0.0.0
  title: Test Service
  description: description
  termsOfService: terms
  contact:
    name: API Team
    url: http://swagger.io
    email: apiteam@swagger.io
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT

basePath: /api

paths:
  /producesTest:
    get:
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: it works
          schema:
            type: object
            properties:
              name:
                type: string
  /fileUpload:
    post:
      x-swagger-router-controller: TestController
      operationId: uploadFile
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: theFile
          type: file
        - in: formData
          name: stringMetadata
          type: string
        - in: formData
          name: intMetadata
          type: integer
          format: int32
      responses:
        200:
          description: the stringMetadata passed in
          schema:
            type: string
  /primitiveBody/inline:
    post:
      x-swagger-router-controller: TestController
      operationId: inlineRequiredBody
      parameters:
        - in: body
          name: inlineBody
          schema:
            type: object
            properties:
              name:
                type: string
          required: true
      responses:
        200:
          description: 'ok!'
  /primitiveBody/string:
    post:
      x-swagger-router-controller: TestController
      operationId: stringBody
      parameters:
        - in: body
          name: stringBody
          schema:
            type: string
      responses:
        200:
          description: 'ok!'
  /primitiveBody/integer:
    post:
      x-swagger-router-controller: TestController
      operationId: integerBody
      parameters:
        - in: body
          name: stringBody
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: 'ok!'
  /primitiveBody/binary:
    post:
      x-swagger-router-controller: TestController
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      operationId: binaryBody
      parameters:
        - name: content
          in: body
          schema:
            type: string
            format: binary
      responses:
        '200':
          description: 'ok!'
          schema:
            type: string
            format: binary
  /hidden:
    get:
      x-inflector-hidden: true
      responses:
        default:
          description: ok

  /arrayInputTest:
    get:
      operationId: arrayInputTest
      x-swagger-router-controller: TestController
      tags:
        - inputTest
      parameters:
        - name: users
          in: query
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: 'success!'
  /formTest:
    post:
      operationId: formTest
      x-swagger-router-controller: TestController
      tags:
        - formTest
      consumes:
        - x-www-form-urlencoded
      parameters:
        - name: user
          in: formData
          required: true
          type: string
      responses:
        '200':
          description: 'success!'
  /mockResponses:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: true
          type: string
      responses:
        '200':
          description: 'success!'
  /mockResponses/primitiveFloatResponse:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: false
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            type: number
            format: float
  /mockResponses/primitiveDoubleResponse:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: false
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            type: number
            format: double
  /mockResponses/primitiveStringResponse:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: false
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            type: string
  /mockResponses/primitiveStringResponseWithExample:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: false
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            type: string
            example: fun
  /mockResponses/responseWithExamples:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
        - application/yaml
      responses:
        '200':
          description: 'success!'
          examples:
            application/json : {"test":"jsonvalue"}
            application/yaml :
              test: yamlvalue
  /mockResponses/primitiveDateResponse:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: false
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            type: string
            format: date
  /mockResponses/primitiveDateTimeResponse:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: false
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            type: string
            format: date-time
  /mockResponses/primitiveBigDecimalResponse:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: false
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            type: number
  /mockResponses/primitiveEmailResponse:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: false
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            type: string
            format: email
  /mockResponses/primitiveUUIDResponse:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: false
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            type: string
            format: uuid
  /mockResponses/primitiaveMapResponse:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: false
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            type: object
            additionalProperties:
              type: string
  /mockResponses/complexResponse:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: false
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            $ref: '#/definitions/Address'
  /mockResponses/complexResponseWithExample:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      responses:
        '200':
          description: 'success!'
          schema:
            $ref: '#/definitions/User'
  /mockResponses/complexArrayResponse:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: false
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            type: array
            items:
              $ref: '#/definitions/Address'
  /mockResponses/complexArrayResponseWithExample:
    get:
      tags:
        - mockResponses
      produces:
        - application/json
      parameters:
        - name: user
          in: query
          required: false
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /issue-125:
    get:
      parameters: []
      responses:
        200:
          description: int16
          schema:
            type: integer
            format: int16
  /issue-128:
    get:
      parameters: []
      responses:
        303:
          description: issue 128
          schema:
            type: string
            format: url
            example: 'http://foo.bar/other'
  /issue-130:
    get:
      parameters: []
      responses:
        200:
          description: issue 130
          schema:
            type: object
            description: an object with array properties
            properties:
              aStringArray:
                type: array
                items:
                  type: string
                  example: a string value
              anIntegerArray:
                type: array
                items:
                  type: integer
                  format: int32
                  example: 99
  /issue-132:
    get:
      parameters: []
      responses:
        303:
          description: issue 132
          headers:
            Location:
              type: string
              format: url
              example: 'http://foo.bar/other'
              description: URI of the entity affected by the property change
  /issue-132.2:
    get:
      parameters: []
      responses:
        303:
          description: issue 132, alternate example
          headers:
            _links:
              description: array of locations
              type: array
              items:
                type: string
                format: url
                example: 'http://foo.bar/other'
  /issue-132.2:
    get:
      parameters: []
      responses:
        303:
          description: issue 133, alternate example
          headers:
            _links:
              description: array of locations
              type: array
              items:
                type: string
                format: url
                example: 'http://foo.bar/other'
  /form:
    post:
      operationId: postFormData
      x-swagger-router-controller: TestController
      tags:
        - test2
      parameters:
        - name: id
          in: formData
          type: integer
          format: int64
        - name: name
          in: formData
          type: string
      responses:
        200:
          description: 'ok'
  /goodbye:
    get:
      x-swagger-router-controller: TestController
      operationId: goodbye
      tags:
        - test2
      produces:
        - application/json
      parameters:
        - name: happy
          in: query
          required: true
          type: array
          collectionFormat: csv
          items:
            type: string
      responses:
        '200':
          description: 'success!'
          schema:
            $ref: '#/definitions/User'
  /hello:
    get:
      tags:
        - test1
      operationId: testMe
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          required: true
          type: integer
          format: int32
          minimum: 0.0
        - name: min
          in: query
          required: true
          type: integer
          format: int32
          minimum: 10.0
      responses:
        '200':
          description: 'fun!'
          schema:
            type: string
  '/withModelArray/{id}':
    post:
      tags:
        - test2
      operationId: withModelArray
      x-swagger-router-controller: TestController
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: modelArray
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Address'
      responses:
        '200':
          description: 'success!'
          schema:
            $ref: '#/definitions/Animal'
  '/withModel/{id}':
    get:
      tags:
        - test2
      operationId: withModel
      x-swagger-router-controller: TestController
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            $ref: '#/definitions/Animal'
    post:
      tags:
        - test2
      operationId: withModel
      x-swagger-router-controller: TestController
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: animal
          in: body
          schema:
            $ref: '#/definitions/Address'
      responses:
        '200':
          description: 'success!'
          schema:
            $ref: '#/definitions/Address'
  '/withInvalidComposedModel':
    post:
      operationId: withInvalidComposedModel
      x-swagger-router-controller: TestController
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/ExtendedAddress'
      responses:
        '200':
          description: 'success!'
  '/withValidComposedModel':
    post:
      operationId: withValidComposedModel
      x-swagger-router-controller: TestController
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/ExtendedAddress'
      responses:
        '200':
          description: 'success!'
  '/withInvalidComposedModelArray':
    post:

      operationId: withInvalidComposedModelArray
      x-swagger-router-controller: TestController
      parameters:
        - name: body
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/ExtendedAddress'
      responses:
        '200':
          description: 'success!'
  '/unmappedWithModel/{id}':
    post:
      tags:
        - test2
      operationId: unmappedWithModelInput
      x-swagger-router-controller: TestController
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: animal
          in: body
          schema:
            $ref: '#/definitions/Address'
      responses:
        '200':
          description: 'success!'
          schema:
            $ref: '#/definitions/Address'
  '/mappedWithDefinedModel/{id}':
    post:
      tags:
        - test2
      operationId: mappedWithDefinedModel
      x-swagger-router-controller: TestController
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: animal
          in: body
          schema:
            $ref: '#/definitions/Dog'
      responses:
        '200':
          description: 'success!'
          schema:
            $ref: '#/definitions/Dog'
  '/unmappedWithUndefinedModel/{id}':
    post:
      tags:
        - test2
      operationId: unmappedWithUndefinedModel
      x-swagger-router-controller: TestController
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: mysteryModel
          in: body
          schema:
            $ref: '#/definitions/UnmappedModel'
      responses:
        '200':
          description: 'success!'
  '/withPath/{id}':
    get:
      tags:
        - test1
      operationId: withPath
      x-swagger-router-controller: TestController
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            $ref: '#/definitions/User'
  '/withDate/{date}':
    get:
      tags:
        - test1
      operationId: withDateTime
      x-swagger-router-controller: TestController
      parameters:
        - name: date
          in: path
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: 'success!'
          schema:
            $ref: '#/definitions/User'
  '/withIntegerEnum/{stage}':
    get:
      tags:
        - test1
      operationId: withDateTime
      x-swagger-router-controller: TestController
      parameters:
        - name: stage
          in: path
          required: true
          type: integer
          format: int32
          enum:
            - 1
            - 2
            - 3
      responses:
        '200':
          description: 'success!'
          schema:
            $ref: '#/definitions/User'
  '/overloaded':
    get:
      tags:
        - overloaded
      operationId: overloadedResponse
      x-swagger-router-controller: TestController
      parameters:
        - name: arg1
          in: query
          type: string
      responses:
        '200':
          description: 'success!'
          schema:
            $ref: '#/definitions/User'
  '/throwApiException':
    get:
      tags:
        - throw
      operationId: throwApiException
      x-swagger-router-controller: TestController
      responses:
        '200':
          description: 'success!'
  '/throwApiExceptionAsCause':
    get:
      tags:
        - throw
      operationId: throwApiExceptionAsCause
      x-swagger-router-controller: TestController
      responses:
        '200':
          description: 'success!'
  '/throwNonApiException':
    get:
      tags:
        - throw
      operationId: throwNonApiException
      x-swagger-router-controller: TestController
      responses:
        '200':
          description: 'success!'
  '/returnNonRfc2616Status':
    get:
      tags:
        - throw
      operationId: returnNonRfc2616Status
      x-swagger-router-controller: TestController
      responses:
        '200':
          description: 'success!'
  '/responseHeaders':
    get:
      tags:
        - response
      operationId: returnWithResponseHeaders
      x-swagger-router-controller: TestController
      responses:
        '200':
          description: success
          headers:
            x-thanks-alot:
              type: string
definitions:
  User:
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    description: 'the name!'
    example: |
      {
        "foo":"bar"
      }
  Address:
    type: object
    x-swagger-router-model: io.swagger.test.models.Address
    required:
      - street
    properties:
      street:
        type: string
        example: 12345 El Monte Road
      city:
        type: string
        example: Los Altos Hills
      state:
        type: string
        example: CA
      zip:
        type: string
        example: '94022'
  Water:
    properties:
      clear:
        type: boolean
      name:
        type: string
      prices:
        type: array
        items:
          type: number
          format: float
      id:
        type: string
        format: uuid
  Animal:
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      address:
        $ref: '#/definitions/Address'
    description: 'the name!'
  Dog:
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      dogType:
        type: string
  UnmappedModel:
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  ExtendedAddress:
    type: object
    x-swagger-router-model: io.swagger.test.models.ExtendedAddress
    allOf:
      - $ref: '#/definitions/Address'
      - type: object
        required:
        - gps
        properties:
          gps:
            type: string